1.def binary_search(nums, target):
    low = 0
    high = len(nums) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    
    return -1

2)def push_zeros_to_end(arr, n):
    j = 0
    for i in range(n):
        if arr[i] != 0:
            arr[i], arr[j] = arr[j], arr[i]
            j += 1
3)def two_sum(nums, target):
    num_dict = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_dict:
            return [i, num_dict[complement]]
        else:
            num_dict[num] = i
    return [0, 0]
4)def search_rotated_array(nums, target):
    low = 0
    high = len(nums) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            return mid
        elif nums[low] <= nums[mid]:
            if nums[low] <= target <= nums[mid]:
                high = mid - 1
            else:
                low = mid + 1
        else:
            if nums[mid] <= target <= nums[high]:
                low = mid + 1
            else:
                high = mid - 1
    
    return -1


5)def merge_sort(nums):
    def merge(nums, low, mid, high):
        n = mid - low + 1
        m = high - mid

        left = nums[low:low + n]
        right = nums[mid + 1:mid + 1 + m]

        i = j = 0
        k = low

        while i < n and j < m:
            if left[i] < right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1

        while i < n:
            nums[k] = left[i]
            i += 1
            k += 1

        while j < m:
            nums[k] = right[j]
            j += 1
            k += 1

    def sort(nums, low, high):
        if low < high:
            mid = low + (high - low) // 2
            sort(nums, low, mid)
            sort(nums, mid + 1, high)
            merge(nums, low, mid, high)

    sort(nums, 0, len(nums) - 1)
    return nums

6)Duplicate Emails
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);



7) Customers Who Never Order
# Write your MySQL query statement below
select c.name  as Customers from Customers as c where c.id not in(select Orders.customerId from Orders);
